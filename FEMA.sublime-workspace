{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"gll",
				"glLineWidth(GLfloat width)	void"
			],
			[
				"glp",
				"glPopMatrix()	void"
			],
			[
				"s",
				"struct	struct"
			],
			[
				"Fy",
				"Fy	float"
			],
			[
				"x",
				"xMax	float"
			],
			[
				"sc",
				"scale	float"
			],
			[
				"file",
				"filename	char *"
			],
			[
				"sca",
				"scaleP	float *"
			],
			[
				"L",
				"Loads"
			],
			[
				"b",
				"BiggestNodeValue"
			],
			[
				"int",
				"intent"
			],
			[
				"B",
				"BiggestValue"
			],
			[
				"glRot",
				"glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)	void"
			],
			[
				"glTR",
				"glTranslatef(GLfloat x, GLfloat y, GLfloat z)	void"
			],
			[
				"glTr",
				"glTranslatef(GLfloat x, GLfloat y, GLfloat z)	void"
			],
			[
				"off",
				"offsetY	float"
			],
			[
				"prin",
				"printf	printf …"
			],
			[
				"sq",
				"squereF(float x)	float"
			],
			[
				"glc",
				"glColor3b(GLbyte red, GLbyte green, GLbyte blue)	void"
			],
			[
				"scale",
				"scaleValue	float"
			],
			[
				"r",
				"ratio	float"
			],
			[
				"glsc",
				"glScalef(GLfloat x, GLfloat y, GLfloat z)	void"
			],
			[
				"draw",
				"drawMomentDiagrams()	int"
			],
			[
				"for",
				"forceVector	float **"
			],
			[
				"f",
				"force	float **"
			],
			[
				"Set",
				"SetElementDisplacementVector"
			],
			[
				"dr",
				"drawElements()	void"
			],
			[
				"be",
				"beamCoord	float **"
			],
			[
				"ra",
				"ratio	int"
			],
			[
				"print",
				"printf	printf …"
			],
			[
				"num",
				"numberOfElm"
			],
			[
				"err",
				"errorFlag"
			],
			[
				"bea",
				"beamcoord	float[][]"
			],
			[
				"Elm",
				"Elms"
			],
			[
				"inte",
				"integer"
			],
			[
				"wr",
				"write	Write"
			],
			[
				"su",
				"sub	subroutine"
			],
			[
				"c",
				"CFLAGS"
			],
			[
				"fo",
				"for	For Loop"
			],
			[
				"st",
				"static"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/fortran/FEM.f90",
			"settings":
			{
				"buffer_size": 2940,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/c/fem_draw.c",
			"settings":
			{
				"buffer_size": 8547,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nAdvancedNewFile:\n---------------\n\n  New Features/Enhancements:\n  \n  - Add OS Specific Aliases to settings.\n  - Display an error when attempting to use an invalid alias.\n  - Display an error when attempting to open a directory in a view.\n  - Display an error if path creation fails.\n  \n  Please see the README for more information about the new settings.\n  \n  Bug Fixes:\n  - Status bar update causing errors when no view is present.\n  - Specifying absolute paths for Windows produced unexpected behavior.\n  \n",
			"settings":
			{
				"buffer_size": 558,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"scratch": true
			}
		},
		{
			"contents": "\n\nmodule FEMMath\n  implicit none\n\ncontains\n\n\n\n  ! Gauss elimination with partial pivoting\n\n  subroutine GaussSolver(A,B,X,len,errorFlag)\n    integer, intent(in) :: len\n    integer, intent(inout) :: errorFlag\n    real, intent(inout)  :: A(len,len), B(len)\n    REAL, intent(out) :: X(len)\n\n    if (errorFlag < 0) return\n\n    call GaussElimination(A,B,X,len,errorFlag)\n    call BackwardSubstitution(A,B,X,len,errorFlag)\n  end subroutine GaussSolver\n\n\n  subroutine GaussElimination(A,B,X,len,errorFlag)\n    integer, intent(in) :: len\n    integer, intent(inout) :: errorFlag\n    real, intent(inout)  :: A(len,len), B(len)\n    REAL, intent(out) :: X(len)\n    \n\n    integer i,j,k\n    real  :: akk\n\n     do k=1, len-1\n       do i=k+1 ,len\n          IF ( (ABS(A(I,k))-abs(A(k,k))).gt. 0) then   \n                call swapAB(A,B,k,i)\n          end if\n       end do\n\n       ! Tester om matrisen er singulær\n       if (abs(A(k,k))< epsilon(A(k,k))) THEN\n          print *, 'Matrisen er singulær'\n          errorFlag = -5\n          return\n       end if\n\n       ! utfører radoperasjoner\n       do  i= k+1, len\n          akk=A(k,k)\n          do j= k+1, len, 1                     \n             A(i,j) =  A(i,j)- A(k,j)*(A(i,k)/akk)\n          end do\n          B(i)=B(i)- A(i,k)*B(k)/A(k,k)\n          A(i,k) =0 \n       end do\n    end do\n  end subroutine GaussElimination\n  \n\n  subroutine BackwardSubstitution(A,B,X,len ,errorFlag)\n    integer, intent(in) :: len\n    integer, intent(inout) :: errorFlag\n    real, intent(inout)  :: A(len,len), B(len)\n    REAL, intent(out) :: X(len)\n\n    integer :: j,k\n    real :: tmp\n\n    do k =len , 1, -1\n       tmp = 0.0d0\n       do j = k+1, len\n          tmp = tmp + A(k,j)*X(j)\n       end do\n       X(k)=(B(k)-tmp)/A(k,k)\n       if (abs(A(k,k)) == 0) THEN\n          errorFlag = 5\n          x(k)=1 \n          print *, ''\n          print *, '####There is no unik solution! Set x',k,'equals 1'\n       end if\n    end do\n  end subroutine BackwardSubstitution\n\n  real  function  AngelFromPoints(x1,y1,x2,y2)\n    real, intent(in)::x1,y1,x2,y2\n\n    real :: dx,dy\n\n    dx=x2-x1\n    dy=y2-y1\n    AngelFromPoints = atan(dy/dx)\n  end function AngelFromPoints\n\n  real  function  LengthBetweenPoints(x1,y1,x2,y2)\n    real, intent(in)::x1,y1,x2,y2\n\n    real :: dx,dy\n\n    dx=x2-x1\n    dy=y2-y1\n    LengthBetweenPoints = sqrt(dx**2+dy**2)\n  end function LengthBetweenPoints\n\n\n  function RotationMatrix(cosT,sinT)\n    real, intent(in) :: cosT, sinT \n\n    real :: RotationMatrix(6,6)\n\n    call NullifyMatrix(RotationMatrix)\n\n    RotationMatrix(3,3)=1\n    RotationMatrix(6,6)=1\n    RotationMatrix(1,1)=cosT\n    RotationMatrix(2,2)=cosT\n    RotationMatrix(4,4)=cosT\n    RotationMatrix(5,5)=cosT\n    RotationMatrix(1,2)=-sinT\n    RotationMatrix(2,1)=sinT\n    RotationMatrix(4,5)=-sinT\n    RotationMatrix(5,4)=sinT\n\n  end function RotationMatrix\n\n\n  subroutine SwapRow(A,r1,r2)\n    real, intent(inout) :: A(:,:)\n    integer, intent(in) :: r1,r2\n\n    real :: swap(size(A, 1))\n\n    swap=A(r1,:)\n    A(r1,:)=A(r2,:)\n    A(r1,:)=swap\n\n  end subroutine swapRow\n\n\n  ! swapRow bytter rad r1 med r2 i matrisen A og vektoren B\n\n  subroutine swapAB(A,B,r1,r2)\n    real, intent(inout) :: A(:,:), B(:)\n    integer, intent(in) :: r1,r2\n\n    real :: swapA(size(A, 1)), swapB\n\n    call swapRow(A,r1,r2)\n    swapB=B(r1)\n    B(r1)=B(r2)\n    B(r1)=swapB\n  end subroutine swapAB\n\n  subroutine NullifyMatrix(Matrix)\n    real, intent(inout) :: Matrix(:,:) \n\n    integer i,j\n\n    forall (i=lbound(Matrix,1):ubound(Matrix,1), j=lbound(Matrix,2):ubound(Matrix,2)) Matrix(i,j)=0\n    \n  end subroutine NullifyMatrix\n\nend module FEMMath\n",
			"file": "src/fortran/FEMMath.f90",
			"file_size": 3609,
			"file_write_time": 1353973949000000,
			"settings":
			{
				"buffer_size": 3609,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fortran/FEMUtility.f90",
			"settings":
			{
				"buffer_size": 889,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fortran/FEMMethods.f90",
			"settings":
			{
				"buffer_size": 10379,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/FEMA.sublime-build",
	"command_palette":
	{
		"height": 159.0,
		"selected_items":
		[
			[
				"clang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"move",
				"File: Move"
			],
			[
				"git add ",
				"Git: Add..."
			],
			[
				"ren",
				"File: Rename"
			],
			[
				"renam",
				"File: Rename"
			],
			[
				"git comm",
				"Git: Commit history"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git c",
				"Git: Commit"
			],
			[
				"git diff",
				"Git: Diff Current File"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"re",
				"Rope Refactoring: Rename"
			],
			[
				"git sta",
				"Git: Stash Changes"
			],
			[
				"git ch",
				"Git: Checkout Current File"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"import",
				"Rope: Organize Imports"
			],
			[
				"fet",
				"Git: Fetch"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"or",
				"Rope: Organize Imports"
			],
			[
				"syntax",
				"Set Syntax: C++"
			],
			[
				"clan",
				"Build: Clean"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"Package Control: ",
				"Package Control: Add Repository"
			],
			[
				"synt",
				"Set Syntax: C"
			],
			[
				"open",
				"Rope: New Project"
			],
			[
				"rever",
				"File: Revert"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 320.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/simenhg/workspace/FEMA/src/c/fem_draw.h",
		"/home/simenhg/workspace/FEMA/src/c/fem_math.h",
		"/home/simenhg/workspace/FEMA/src/c/main.c",
		"/home/simenhg/workspace/FEMA/src/c/fem_math.c",
		"/home/simenhg/workspace/FEMA/src/run",
		"/home/simenhg/workspace/FEMA/src/c/fem_draw.c",
		"/home/simenhg/workspace/FEMA/src/c/Makefile",
		"/home/simenhg/workspace/FEMA/src/c/fem_file_reader.h",
		"/home/simenhg/workspace/FEMA/src/c/fem_file_reader.c",
		"/home/simenhg/workspace/FEMA/src/c/fem_graphics.h",
		"/home/simenhg/workspace/FEMA/src/c/fem_graphics.c",
		"/home/simenhg/workspace/FEMA/src/c/fem_keyboard.h",
		"/home/simenhg/workspace/FEMA/src/c/fem_keyboard.c",
		"/home/simenhg/workspace/FEMA/src/fortran/input.dat",
		"/home/simenhg/workspace/FEMA/src/c/texobj.c",
		"/home/simenhg/.config/sublime-text-2/Packages/SublimeClang/Default.sublime-keymap",
		"/home/simenhg/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/simenhg/.config/sublime-text-2/Packages/User/SublimeClang.sublime-settings",
		"/home/simenhg/workspace/FEMA/src/fortran/Makefile",
		"/home/simenhg/workspace/FEMA/src/fem_keyboard.h",
		"/home/simenhg/workspace/FEMA/src/fem_math.h",
		"/home/simenhg/workspace/FEMA/src/math.h",
		"/home/simenhg/workspace/FEMA/src/c/math.c",
		"/home/simenhg/workspace/FEMA/src/fortran/FEMTypes.f90",
		"/home/simenhg/workspace/FEMA/src/fortran/FEMMath.f90",
		"/home/simenhg/workspace/FEMA/src/fortran/FEM.f90",
		"/home/simenhg/workspace/FEMA/src/fortran/FEMMethods.f90",
		"/home/simenhg/workspace/FEMA/src/fortran/FEMUtility.f90",
		"/home/simenhg/workspace/FEMA/src/fortran/inputE53.dat",
		"/home/simenhg/workspace/FEMA/src/fortran/math.f90",
		"/home/simenhg/workspace/FEMA/src/c/bezier.c",
		"/home/simenhg/workspace/FEMA/src/c/bezier",
		"/home/simenhg/.config/sublime-text-2/Packages/AdvancedNewFile/Default (Linux).sublime-keymap",
		"/home/simenhg/amd-driver-install",
		"/home/simenhg/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/simenhg/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/simenhg/workspace/FEMA/src/fortran/FEM",
		"/home/simenhg/workspace/FEMA/src/c/line.c",
		"/home/simenhg/.config/sublime-text-2/Packages/User/FEMAC.sublime-build",
		"/usr/include/GL/gl.h",
		"/home/simenhg/workspace/FEMA/src/c/texobj.c99",
		"/home/simenhg/.config/sublime-text-2/Packages/SublimeClang/SublimeClang.sublime-settings",
		"/home/simenhg/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/simenhg/workspace/FEMA/src/fortran/FEMA.sublime-workspace",
		"/home/simenhg/github/FEMA/src/FEMMath.f90",
		"/home/simenhg/github/FEMA/vidu/csample.c",
		"/home/simenhg/github/FEMA/src/FEMUtility.f90",
		"/home/simenhg/github/FEMA/src/math/math.f90",
		"/home/simenhg/github/FEMA/src/math.f90",
		"/home/simenhg/github/FEMA/src/Makefile"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CalkulateLoadsOnElement",
			"BiggestNodeValue",
			"call",
			"length",
			"c