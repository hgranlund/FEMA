{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Element",
				"ElementNr"
			],
			[
				"A",
				"a"
			],
			[
				"fem",
				"FEMTypes"
			],
			[
				"gl",
				"globalIndex"
			],
			[
				"null",
				"NullifyRealVector"
			],
			[
				"global",
				"globalestivhetsmatrisen"
			],
			[
				"cy",
				"cycle"
			],
			[
				"L",
				"LoadVector"
			],
			[
				"Gl",
				"GlobalStiffnessMatrix"
			],
			[
				"file",
				"file_in"
			],
			[
				"re",
				"read	Read"
			],
			[
				"file_",
				"file_out"
			],
			[
				"op",
				"open	Output File"
			],
			[
				"err",
				"errorFlag"
			],
			[
				"for",
				"ForceVector"
			],
			[
				"em",
				"elm"
			],
			[
				"io",
				"iostat"
			],
			[
				"wr",
				"write	Write"
			],
			[
				"fil",
				"file_out"
			],
			[
				"El",
				"ElementLoadVector"
			],
			[
				"Ele",
				"ElementLoadVector"
			],
			[
				"R",
				"ElmsRotationMatrix"
			],
			[
				"num",
				"numberOfLoads"
			],
			[
				"nu",
				"numberOfNodes"
			],
			[
				"mat",
				"Matrix"
			],
			[
				"M",
				"Matrix"
			],
			[
				"h",
				"heigth"
			],
			[
				"int",
				"integer"
			],
			[
				"fun",
				"fun	function"
			],
			[
				"elm",
				"Elms"
			],
			[
				"F",
				"ForceVector"
			],
			[
				"D",
				"DisplacementVector"
			],
			[
				"Di",
				"DisplacementVectorWithZero"
			],
			[
				"no",
				"node1"
			],
			[
				"P",
				"PrintMatrix"
			],
			[
				"Load",
				"LoadsOnElement"
			],
			[
				"sub",
				"subroutine"
			],
			[
				"LS",
				"LocalStiffness"
			],
			[
				"node",
				"node2"
			],
			[
				"s",
				"s"
			],
			[
				"len",
				"length"
			],
			[
				"sin",
				"sinT"
			],
			[
				"su",
				"sub	subroutine"
			],
			[
				"Lo",
				"LoadsOnNodes"
			],
			[
				"S",
				"Subroutine"
			],
			[
				"Elm",
				"Elms"
			],
			[
				"el",
				"element"
			],
			[
				"inte",
				"integer"
			],
			[
				"G",
				"GSMlen"
			],
			[
				"di",
				"DisplacementVector"
			],
			[
				"GTR",
				"GTRGConverter"
			],
			[
				"dis",
				"DisplacementVector"
			],
			[
				"t",
				"t	Quick Custom Type"
			],
			[
				"pr",
				"pr_switch"
			],
			[
				"in",
				"int	Integer"
			],
			[
				"B",
				"BackwardSubstitution"
			],
			[
				"b",
				"backwardSubstitution"
			],
			[
				"eps",
				"epsilon"
			],
			[
				"then",
				"then"
			],
			[
				"cl",
				"closeToZeroBug"
			],
			[
				"f",
				"fun	function"
			],
			[
				"Loa",
				"LoadVector"
			],
			[
				"if",
				"if	if (single line)"
			],
			[
				"prin",
				"PrintMatrix"
			],
			[
				"Loc",
				"LocalStiffnessMatrix"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "module FemMethods\n  use FEMTypes\n  use FEMMath\n  implicit none\n\ncontains\n\n  !###############################\n  !Methoden kalkulerer forsyvnigene til systemet\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  subroutine DoFEA(DisplacementVector, Elms,Nodes,Loads,errorFlag)\n    integer, intent(inout) :: errorFlag\n    type (element), intent(inout) :: Elms(:)\n    type (node), intent(in):: Nodes(:)\n    type (load), intent(in) :: Loads(:)\n    real , intent(out) :: DisplacementVector(:)\n\n\n    integer :: status, RGSMLen,i,j, GTRGConverter(DOF*size(Nodes))\n    real , ALLOCATABLE :: GlobalStiffnessMatrix(:,:), LoadVector(:)\n\n    if (errorFlag .NE. 0)then\n       print *, 'Errorflag at begining of CalcDisplacement'\n       return\n    end if\n\n    call SetElementProperties(Elms, Nodes)  \n    CALL GlobalToRedusedGlobalStiffnessMatrixConverter(GTRGConverter, Nodes)\n    RGSMLen = TotalDegrees(Nodes)\n    allocate (GlobalStiffnessMatrix(RGSMLen,RGSMLen) , LoadVector(RGSMLen), stat=errorFlag)\n    if (errorFlag .NE. 0)then\n       print *, \"***Not Enough Memory*** when allocating in CalcDisplacement \"\n       return\n    end if\n\n    call NullifyRealMatrix(GlobalStiffnessMatrix)\n    call NullifyRealVector(DisplacementVector)\n    call NullifyRealVector(LoadVector)\n\n    call GlobalStiffness(GlobalStiffnessMatrix,Elms,Nodes,GTRGConverter,errorFlag)\n    call PopulateLoads(LoadVector,Loads,GTRGConverter, errorflag)\n    if (pr_switch>4)then\n       print * ,''\n       print *, '##### GlobalStivhetsmatrise: '\n       call PrintMatrix(GlobalStiffnessMatrix)\n       print *, 'loadvector: ', LoadVector\n    end if\n\n    call GaussSolver(GlobalStiffnessMatrix,LoadVector,DisplacementVector,RGSMLen,Errorflag)\n\n    if (pr_switch>2)then\n       print * ,''\n       print *, '##### Forskyvninger: '\n       print *,  DisplacementVector\n    end if\n\n    call SetElementForces(Elms, DisplacementVector, GTRGConverter)\n  end subroutine DoFEA\n\n\n  !###############################\n  !LS LocalStiffnesMatrix er den genererte lokale stivhetsmatrisen\n  !Elm er elementet i fokus\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  subroutine LocalStiffness(LS, Elm)\n    real , intent(out) :: LS(:,:)\n    type (element), intent(in):: Elm\n\n    integer::i,j\n    real :: ei,ea,l,t1,t2,t3,t4\n\n    call NullifyRealMatrix(LS)\n\n    ea=elm%e*Elm%a\n    ei=elm%e*elm%i\n    l=elm%l\n    t1 = ea /l\n    t2 = (12*ei)/l**3\n    t3 = (6*ei)/l**2\n    t4= (2*ei)/l\n    LS(1,1)=t1\n    LS(2,2)=t2\n    LS(3,3)=2*t4\n    LS(4,4)=t1  \n    LS(5,5)=t2\n    LS(6,6)=2*t4\n    LS(4,1)=-t1\n    LS(1,4)=-t1\n    LS(2,5)=-t2\n    LS(5,2)=-t2\n    LS(5,3)=t3\n    Ls(3,5)=t3\n    LS(2,3)=-t3\n    LS(3,2)=-t3\n    LS(6,3)=2*t1\n    LS(3,6)=2*t1\n    LS(2,6)=-t3 \n    LS(6,2)=-t3\n    LS(5,6)=t3\n    LS(6,5)=t3\n\n    if (pr_switch > 7)then\n       print *,''\n       print * , '##### LocalStiffness:'\n       print *, \"t1:\", t1, \"t2:\", t2, \"t3:\", t3, \"t4:\", t4\n       call PrintMatrix(LS)\n    end if\n  end subroutine LocalStiffness\n\n\n\n  !##############################\n  !LS LocalStiffnesMatrix er den genererte lokale stivhetsmatrisen\n  !,til element elm, multiplisert med Elementets rotasjonsmatriser CkC^t\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  subroutine LocalStiffnessWithRotation(LS, elm)\n    real , intent(out) :: LS(:,:)\n    type (element), intent(in):: elm\n\n    integer::i,j\n    real :: e,a,inertia,l,t1,t2,t3,c,s\n\n    s=elm%sinT\n    c=elm%cosT\n    e=elm%e\n    a=elm%a\n    inertia=elm%i\n    l=elm%l\n    t1 = (12 *inertia) /l**2\n    t2 = (6*inertia)/l\n    t3 = e/l\n\n    !     !Fix av avrundinertiagsfeil i real verdier\n    !     if ( abs(c) .LE. epsilon(c) ) c=0 \n    !     if ( abs(s) .LE. epsilon(s) ) s=0\n\n    if (pr_switch > 7)then\n       print *,''\n       print * , '##### LocalStiffness:'\n       print *,\"C: \",c,\" S: \", s ,\" I: \",inertia, \" L:\",l,  &\n            &\"(12 *I) /L**2:\", t1, \"(6*I)/L:\", t2, \"E/L:\", t3\n    end if\n\n    LS(1,1)=t3*((a*c**2)+(t1*s**2))\n    LS(2,1)=t3*(a-t1)*c*s\n    LS(3,1)=t3*(-t2*s)\n    LS(4,1)=-LS(1,1)\n    LS(5,1)=t3*((12/l**2-a)*c*s)\n    LS(6,1)=LS(3,1)\n\n    LS(1,2)=LS(2,1)\n    LS(2,2)=t3*((a*s**2)+(t1*c**2))\n    LS(3,2)=t3* (6*inertia*c/l)\n    LS(4,2)=LS(5,1)\n    LS(5,2)=-LS(2,2)\n    LS(6,2)=LS(3,2)\n\n    LS(1,3)=LS(3,1)\n    LS(2,3)=LS(3,2)\n    LS(3,3)=t3*4*inertia\n\n    !     LS(4,3)=-LS(3,1)\n    LS(4,3)=t3*((a*s**2)+(t1*s**2))\n\n    LS(5,3)=-LS(3,2)\n    LS(6,3)=t3*2*inertia\n\n\n    LS(1,4)=LS(4,1)\n    LS(2,4)=LS(4,2)\n    LS(3,4)=LS(4,3)\n    LS(4,4)=LS(1,1)\n    LS(5,4)=LS(2,1)\n    LS(6,4)=-LS(6,1)\n\n    LS(1,5)=LS(5,1)\n    LS(2,5)=LS(5,2)\n    LS(3,5)=LS(5,3)\n    LS(4,5)=LS(5,4)\n    LS(5,5)=LS(2,2)\n    LS(6,5)=LS(5,3)\n\n    LS(1,6)=LS(6,1)\n    LS(2,6)=LS(6,2)\n    LS(3,6)=LS(6,3)\n    LS(4,6)=LS(6,4)\n    LS(5,6)=LS(6,5)\n    LS(6,6)=LS(3,3)\n\n    if ( pr_switch >9 ) then\n       print *, ''\n       print *, '###### LocalStiffnessMatrix'\n       call PrintMatrix(LS)\n    end if\n\n  end subroutine LocalStiffnessWithRotation\n\n\n\n  !###############################\n  !En prosedyre som genererer  den reduserte globale stivhetsmatrisen direkte\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  subroutine GlobalStiffness(GlobalStiffnessMatrix, Elms,Nodes,GTRGConverter,errorFlag)\n    integer ,intent(in)::GTRGConverter(:)\n    type (element), intent(in):: Elms(:)\n    type (node), intent(in):: Nodes(:)\n    integer ,intent(inout) :: errorFlag\n    real ,intent(out) :: GlobalStiffnessMatrix(:,:)\n\n    integer :: i ,j, k\n    real :: LocalStiffnessMatrix(6,6)\n    type (element) :: elm\n    integer :: GMC(6)   ! GCM er en konverteringsmatrise som konverterer\n    ! den locale stivhetsmatrisen til den globale stivhetsmatrisen\n\n    if (Errorflag .LT. 0)then\n       print *, 'ERRORFLAG AT BEGINING OF GLOBALSTIFFNESS'\n       return\n    end if\n\n    do i = 1, ubound(Elms,1)\n       elm = Elms(i)\n       call LocalStiffnessWithRotation(LocalStiffnessMatrix,elm)\n       ! Hvis GobalMartixConverter (GCM) er null Betyr det at\n       ! verdien ikke skal være med videre pga. grensebetingerlser\n       ! TODO: her kan vi spare tid ved å lage GMc av mindre rank, slik at vi bare tar med de vardiene vi trenger. Da kan vi fjerne if checken i loop\n       do j=1,DOF\n          GMC(j)=GTRGConverter(((elm%node1-1)*DOF) +j)* Nodes(elm%node1)%GDOF(j)\n          GMC(j+3)=GTRGConverter(((elm%node2-1)*DOF) +j) *  Nodes(elm%node2)%GDOF(j)\n       end do\n       if (pr_switch > 6)then\n          print * ,''\n          print *, '##### GlobalStiffness: '\n          print *, 'Jobber på element ...: ', elm\n          print *, 'GlobalMatrixConverter... : ' , GMC\n       end if\n\n       do j=1,6\n          do k =1,6\n             if ((GMC(k) == 0) .OR. (GMC(j)==0))  cycle\n             GlobalStiffnessMatrix(GMC(k),GMC(j))=GlobalStiffnessMatrix(GMC(k),GMC(j))+LocalStiffnessMatrix(k,j)\n          end do\n       end do\n    end do\n  end subroutine GlobalStiffness\n\n\n\n  !###############################\n  ! Prosedyren populerer Kraftvektoren (LoadVectors)\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  subroutine PopulateLoads(LoadVector,Loads,GTRGConverter,errorflag)\n    integer, intent(in) :: GTRGConverter(:),Errorflag\n    type (load), intent(in) :: Loads(:)\n    real , intent(out):: LoadVector(:)\n\n    integer :: i, globalIndex\n\n    if (Errorflag .LT. 0) return\n\n    do i=1,ubound(Loads, 1)\n       globalIndex=(Loads(i)%nodeNr-1)*3+Loads(i)%DOF\n       globalIndex= GTRGConverter(globalIndex)\n       if (globalIndex==0) cycle\n       LoadVector(globalIndex)=Loads(i)%value\n    end do\n\n    if (pr_switch>5)then\n       print *, '##### PopulateLoads:'\n       print *, 'LoadVector', LoadVector\n    end if\n\n  end subroutine PopulateLoads\n\n\n\n\n  !###############################\n  ! Genererer en konverteringsmatrise som konverterer fra den globalestivhetsmatrisen til den reduserte globalestivhetsmatrisen.\n  ! Den reduserte globlaestivhetsmatrisen er alle grensebetingelser tatt i be\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  Subroutine GlobalToRedusedGlobalStiffnessMatrixConverter(GTRGConverter,Nodes)\n    type (node), intent(in):: Nodes(:)\n\n    integer ,intent(out) :: GTRGConverter(size(Nodes)*3)\n\n    integer ::i,j,globalIndex,redusedIndex\n\n    globalIndex=1\n    redusedIndex=1\n    do i=1,ubound(Nodes, dim=1)\n       do j=1,3\n          if (Nodes(i)%GDOF(j) .NE. 0)then\n             GTRGConverter(globalIndex)=redusedIndex\n             redusedIndex=redusedIndex+1\n          else\n             GTRGConverter(globalIndex)=0\n          end if\n          globalIndex=globalIndex+1\n       end do\n    end do\n\n    if(pr_switch>7)then\n       print *,''\n       print *, 'Global til redusert globalestivhetsmatrise konvertor:'\n       print *, GTRGConverter\n    end if\n  end Subroutine GlobalToRedusedGlobalStiffnessMatrixConverter\n\n\n\n\n  !###############################\n  ! Kalkulerer hvor mange grader av frihet alle nodene har tilsammen\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  integer Function totalDegrees(Nodes)\n    type (node), intent(in):: Nodes(:)\n\n    integer ::i,j\n\n    totalDegrees=0\n    do i=1,ubound(Nodes,1)\n       do j=1,3\n          totalDegrees = totalDegrees+Nodes(i)%GDOF(j)\n       end do\n    end do\n  end Function totalDegrees\n\n\n\n\n  !###############################\n  ! Prosedyren kalkulerer kreftene til elementet ut i fra forskyvningene\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  Subroutine LoadsOnElement(ElementLoadVector,elm, ElementDisplacementVector)\n    real, intent(in) :: ElementDisplacementVector(:) \n    type (element), intent(inout) :: elm\n    real, intent(out):: ElementLoadVector(:) \n\n    real :: LocalStiffnessMatrix(DOF*2,DOF*2), ElmsRotationMatrix(6,6)\n\n    ElmsRotationMatrix=RotationMatrix(elm%cosT,elm%sinT)\n\n    call LocalStiffness(LocalStiffnessMatrix, elm)\n    ElementLoadVector = matmul(ElmsRotationMatrix, ElementDisplacementVector)\n    ElementLoadVector = matmul(LocalStiffnessMatrix, ElementLoadVector)\n  end Subroutine LoadsOnElement\n\n\n\n\n  !###############################\n  ! Prosedyren kalkulerer kreftene på alle elementet ut i fra forskyvningene\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  Subroutine SetElementForces(Elms, DisplacementVector, GTRGConverter)\n    type (element), intent(inout) :: Elms(:)\n    real, intent(in) ::  DisplacementVector(:)\n    integer , intent(in) :: GTRGConverter(:)\n\n    integer :: i,j\n    real ::  ElementDisplacementVector(DOF*2)\n\n\n    do i =1,size(Elms)\n       do j=1,DOF\n          ElementDisplacementVector(j)=DisplacementVector(GTRGConverter(((Elms(i)%node1-1)*DOF) +j))\n          ElementDisplacementVector(j+3)=DisplacementVector(GTRGConverter(((Elms(i)%node2-1)*DOF) +j) )\n       end do\n       call LoadsOnElement(Elms(i)%ForceVector, Elms(i), ElementDisplacementVector )\n       if(pr_switch>5)then\n          print * ,''\n          print *,'Krefter på element nr : ', i\n          print *, Elms(i)%ForceVector\n       end if\n    end do\n\n  end Subroutine SetElementForces\n\n\n\n\n  !###############################\n  ! Prosedyren populerer verdiene til elementene\n  !\n  ! Author: Simen Haugerud Granlund\n  ! Date/version: 02-11-12/ 1.0\n  !###############################\n\n  subroutine SetElementProperties(Elms, Nodes)\n\n    type (element), intent(inout) :: Elms(:)\n    type (node) , intent(in) :: Nodes(:)\n\n    integer :: n\n    real :: x1,x2,y1,y2\n\n    do n=1,ubound(Elms,1)\n       x2 = Nodes(Elms(n)%node2)%x\n       x1=Nodes(Elms(n)%node1)%x\n       y2 = Nodes(Elms(n)%node2)%y\n       y1= Nodes(Elms(n)%node1)%y\n       Elms(n)%l=LengthBetweenPoints(x1,y1,x2,y2)\n       Elms(n)%cosT=(x2-x1)/Elms(n)%l\n       Elms(n)%sinT=(y2-y1)/Elms(n)%l\n    end do\n  end subroutine SetElementProperties\n\nend module FemMethods\n",
			"file": "FEMMethods.f90",
			"file_size": 14558,
			"file_write_time": 1351942008000000,
			"settings":
			{
				"buffer_size": 12085,
				"line_ending": "Unix"
			}
		},
		{
			"file": "FEMUtility.f90",
			"settings":
			{
				"buffer_size": 1950,
				"line_ending": "Unix"
			}
		},
		{
			"file": "FEM.f90",
			"settings":
			{
				"buffer_size": 3092,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/simenhg/workspace/FEMA/README.md",
			"settings":
			{
				"buffer_size": 651,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# TODO\n\n### kode\n\n* Ta med element krefter. se side 183\n* Kan lage flere likningsløsere, bestemme meg for en som programmet skal bruke\n\n\n### Besvarelse\n\n* Undersøke tidsforbruk av likningsløsere\n	* **Multigrid:** løse med forksjellige mesh, er det veldig lite kan det være lurt å bruke en dirkete løser.\n\n\n### Spørsmål\n\n* Skal jeg sende med lenden av en array som parameter eller skal jeg bruke SIZE(ARRAY, dim)\n* Skal jeg gjøre antal noder per element til en variabel eller skal jeg gange med '2'\n\n",
			"file": "/home/simenhg/workspace/FEMA/todo.md",
			"file_size": 547,
			"file_write_time": 1351942008000000,
			"settings":
			{
				"buffer_size": 499,
				"line_ending": "Unix"
			}
		},
		{
			"file": "input.dat",
			"settings":
			{
				"buffer_size": 137,
				"line_ending": "Unix"
			}
		},
		{
			"file": "FEMTypes.f90",
			"settings":
			{
				"buffer_size": 484,
				"line_ending": "Unix"
			}
		},
		{
			"file": "output.dat",
			"settings":
			{
				"buffer_size": 781,
				"line_ending": "Unix"
			}
		},
		{
			"file": "math.f90",
			"settings":
			{
				"buffer_size": 4244,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"markd",
				"Pandoc: Render Markdown DocX"
			],
			[
				"markdown",
				"Set Syntax: MultiMarkdown"
			],
			[
				"markdoen",
				"Markdown Preview: preview in Sublime Text"
			],
			[
				"MODER",
				"Set Syntax: Fortran - Modern"
			],
			[
				"mo",
				"Set Syntax: Fortran - Modern"
			],
			[
				"for",
				"Set Syntax: Fortran - Modern"
			],
			[
				"shell",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"git",
				"Git: Diff Tool Current File"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"enable",
				"Package Control: Disable Package"
			],
			[
				"pack",
				"Package Control: Enable Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"mode",
				"Set Syntax: Fortran - Modern"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Set Syntax: Fortran - Punchcard"
			],
			[
				"comm",
				"Toggle Block Comment"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"pag",
				"Package Control: Install Package"
			],
			[
				"fort",
				"Set Syntax: Fortran - Punchcard"
			],
			[
				"",
				"Preferences: Key Bindings - User"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"bul",
				"Build: Build"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/simenhg/workspace/FEMA/axbsolver.py",
		"/home/simenhg/workspace/FEMA/src/inputS219.dat",
		"/home/simenhg/workspace/FEMA/src/inputEasy.dat",
		"/home/simenhg/workspace/FEMA/src/inputE52S224.dat",
		"/home/simenhg/workspace/FEMA/src/math.f90",
		"/home/simenhg/Downloads/lapacks.f90",
		"/home/simenhg/.config/sublime-text-2/Packages/SublimeCodeIntel/Base File.sublime-settings",
		"/home/simenhg/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/simenhg/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/simenhg/Documents/skole/prosedyreorientert/math/gauss.f90",
		"/home/simenhg/workspace/FEMA/src/output.dat",
		"/home/simenhg/glibal.txt",
		"/home/simenhg/.config/sublime-text-2/Packages/SublimeCodeIntel/Default (Linux).sublime-mousemap",
		"/home/simenhg/.config/sublime-text-2/Packages/Terminal/Default (Linux).sublime-keymap",
		"/home/simenhg/.config/sublime-text-2/Packages/Terminal/Terminal.sublime-settings",
		"/home/simenhg/workspace/FEMA/src/Makefile",
		"/home/simenhg/.config/sublime-text-2/Packages/User/Fortran - Modern.sublime-settings",
		"/home/simenhg/.config/sublime-text-2/Packages/User/FEMA.sublime-build",
		"/home/simenhg/.config/sublime-text-2/Packages/User/McMake.sublime-build",
		"/home/simenhg/workspace/FEMA/FEMA.sublime-project"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"print",
			"TODO",
			"''\n",
			"  interface \n!      subroutine GaussSolver(A,B,X,len, errorFlag) \n!        integer, intent(in) :: len\n!        integer, intent(inout) :: errorFlag\n!        real, intent(inout)  :: A(len,len), B(len)\n!        REAL, intent(out) :: X(len)\n!      end Subroutine GaussSolver\n\n!      subroutine BackwardSubstitution(A,B,X,len ,errorFlag)\n!        integer, intent(in) :: len\n!        integer, intent(inout) :: errorFlag\n!        real, intent(inout)  :: A(len,len), B(len)\n!        REAL, intent(out) :: X(len)\n!      end Subroutine BackwardSubstitution\n\n!      real  function  AngelFromPoints(x1,y1,x2,y2)\n!        real, intent(in)::x1,y1,x2,y2\n!      end function AngelFromPoints\n\n!      real  function  LengthBetweenPoints(x1,y1,x2,y2)\n!        real, intent(in)::x1,y1,x2,y2\n!      end function LengthBetweenPoints\n\n!      function RotationMatrix(cosT,sinT)\n!        real, intent(in) :: cosT, sinT \n!      end function RotationMatrix\n\n\n\n!   end interface",
			")\n",
			"globalIndex",
			"GTRGConverter",
			"tempLoad",
			"pop",
			"Matrix",
			"LoadVector",
			"Loads",
			"popula",
			"globalmater",
			"ios",
			"t3",
			"\n  ",
			"do",
			"ctrl+shift+d",
			"1",
			"elm",
			"Elms",
			"file_out",
			"write",
			"nulli",
			"numberof",
			"elm",
			"inertia",
			"i",
			"null",
			"Null",
			"number",
			"number\n",
			"number",
			"TotalDegrees",
			"printM",
			"print",
			"printm",
			"1",
			"sinT",
			"cosT",
			"print",
			"load",
			"\n     ",
			"hide",
			"show",
			"hide",
			"RGSMLen",
			"    \n",
			"type",
			"typ",
			"type",
			"GSMLen",
			"GlobalToRedusedGlobalStiffnessMatrixConverter",
			"]]\n",
			"070",
			"069",
			"    ]",
			"\n[",
			"READ",
			"        ",
			"epsil",
			"READ",
			"A",
			"lower_sigular_value",
			")\n",
			"),",
			"in",
			"print *, x1,x2,y1,y2,dy,dx, atan(dy/dx)",
			"make",
			"test",
			"\n     "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"RGSMLEN",
			"inertia",
			"angle"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "FEMMethods.f90",
					"settings":
					{
						"buffer_size": 12085,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								4940,
								4940
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/Syntaxes/Fortran - Modern.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2564.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "FEMUtility.f90",
					"settings":
					{
						"buffer_size": 1950,
						"regions":
						{
						},
						"selection":
						[
							[
								138,
								138
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/Syntaxes/Fortran - Modern.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 495.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "FEM.f90",
					"settings":
					{
						"buffer_size": 3092,
						"regions":
						{
						},
						"selection":
						[
							[
								1611,
								1611
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/Syntaxes/Fortran - Modern.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/simenhg/workspace/FEMA/README.md",
					"settings":
					{
						"buffer_size": 651,
						"regions":
						{
						},
						"selection":
						[
							[
								651,
								651
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "/home/simenhg/workspace/FEMA/todo.md",
					"settings":
					{
						"buffer_size": 499,
						"regions":
						{
						},
						"selection":
						[
							[
								499,
								499
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/MultiMarkdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "input.dat",
					"settings":
					{
						"buffer_size": 137,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "FEMTypes.f90",
					"settings":
					{
						"buffer_size": 484,
						"regions":
						{
						},
						"selection":
						[
							[
								387,
								387
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/Syntaxes/Fortran - Modern.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "output.dat",
					"settings":
					{
						"buffer_size": 781,
						"regions":
						{
						},
						"selection":
						[
							[
								781,
								781
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "math.f90",
					"settings":
					{
						"buffer_size": 4244,
						"regions":
						{
						},
						"selection":
						[
							[
								1107,
								1107
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/Syntaxes/Fortran - Modern.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 156.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.459895833333,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 182.0
	},
	"output.git":
	{
		"height": 118.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"/home/simenhg/workspace/FEMA/src/FEMMethods.f90"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
